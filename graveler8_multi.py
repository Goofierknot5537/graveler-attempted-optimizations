import numpy as np
from multiprocessing import Value, Process
from timeit import timeit

rng = np.random.default_rng()
amount = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231]
prob = [1.377691070325179e-29, 1.0608221241503985e-27, 4.066484809243174e-26, 1.0346944681296476e-24, 1.9659194894463692e-23, 2.97509149402883e-22, 3.735392653613983e-21, 4.002206414586368e-20, 3.735392653613987e-19, 3.0851576361329856e-18, 2.283016650738434e-17, 1.528929332767255e-16, 9.343457033577703e-16, 5.246710488085922e-15, 2.7232925866731553e-14, 1.3132322029068408e-13, 5.909544913080722e-13, 2.4912787378673558e-12, 9.872845368585467e-12, 3.689326427208304e-11, 1.3035620042802668e-10, 4.365898141319598e-10, 1.389149408601694e-09, 4.207713426054399e-09, 1.2155616564157134e-08, 3.354950171707387e-08, 8.860509427842565e-08, 2.2424746082811175e-07, 5.446009762968474e-07, 1.270735611359304e-06, 2.8520954832731097e-06, 6.164206367074143e-06, 1.2842096598071207e-05, 2.581391134359742e-05, 5.0109357314042196e-05, 9.401469896063145e-05, 0.00017061926848410837, 0.0002997365527423565, 0.0005100779932633048, 0.0008414107068360569, 0.0013462571309376793, 0.002090529365927605, 0.003152385551795637, 0.004618611389840082, 0.006578022282499543, 0.009111779013536379, 0.012281093453027296, 0.016113491410000312, 0.02058946124611151, 0.02563177828597564, 0.031099890986983587, 0.03679137430486314, 0.042451585736380366, 0.04779140784158558, 0.0525115468876681, 0.05633056847949848, 0.05901297650233178, 0.060393397005310274, 0.060393397005310295, 0.05902857447411681, 0.056405082275267235, 0.05270638835557754, 0.04817250548628054, 0.04307488585810273, 0.03769052512583987, 0.032278552287257775, 0.027061816564064638, 0.022214924045127652, 0.017859056585298693, 0.014062928615476694, 0.010848544931939184, 0.008200073868742734, 0.006074128791661291, 0.004409983917233526, 0.0031386372023554042, 0.002190071292310241, 0.0014984698315806792, 0.0010054667701082415, 0.0006617174469943189, 0.00042718468097101617, 0.00027055029794831065, 0.00016811973246993623, 0.00010251203199386422, 6.134254123327597e-05, 3.602657183541608e-05, 2.076825905806335e-05, 1.1752580707276228e-05, 6.529211504042246e-06, 3.561388093114024e-06, 1.907410102304495e-06, 1.003156424174957e-06, 5.181137575409161e-07, 2.6281132628886873e-07, 1.3093467510449005e-07, 6.407441547666578e-08, 3.080068393088815e-08, 1.454476741180829e-08, 6.747572510632837e-09, 3.0754242055264998e-09, 1.3772101661112103e-09, 6.059724730889101e-10, 2.619880989262351e-10, 1.1130213353075459e-10, 4.646593924099335e-11, 1.9062949432202513e-11, 7.685697072665913e-12, 3.045276198603419e-12, 1.1858552175247103e-12, 4.5384582399093093e-13, 1.7071264939108685e-13, 6.31119491688256e-14, 2.293257011840204e-14, 8.190203613714931e-15, 2.8750272272332986e-15, 9.919684585190934e-16, 3.364066946282141e-16, 1.1213556487607211e-16, 3.673957253774408e-17, 1.183138776639228e-17, 3.744949068914089e-18, 1.1650952658843823e-18, 3.5626880031174945e-19, 1.07075322498068e-19, 3.1629295805662185e-20, 9.182698782289099e-21, 2.620130052546435e-21, 7.3474546447070335e-22, 2.0248890753129479e-22, 5.484074578972596e-23, 1.4595857406567946e-23, 3.8173780909485255e-24, 9.810564559435211e-25, 2.477415292786658e-25, 6.146970275335308e-26, 1.498515141748408e-26, 3.589036265422097e-27, 8.444791212757935e-28, 1.9519590394452701e-28, 4.4319842924603095e-29, 9.88428151555886e-30, 2.1651283319795575e-30, 4.657841092438186e-31, 9.840509350221693e-32, 2.0415042707918918e-32, 4.158619810872458e-33, 8.31723962174481e-34, 1.6330653138585658e-34, 3.147631557323808e-35, 5.9549786219639894e-36, 1.1057342855100813e-36, 2.0148935869294756e-37, 3.602789857423591e-38, 6.320683960392193e-39, 1.0878737099585895e-39, 1.8366698999300916e-40, 3.041367361174523e-41, 4.93897263780475e-42, 7.864606111154112e-43, 1.227807705116874e-43, 1.8790348526946167e-44, 2.8185522790418685e-45, 4.143213495071948e-46, 5.967591453807351e-47, 8.420527818255649e-48, 1.1638127878890098e-48, 1.5752617533043255e-49, 2.087696299559926e-50, 2.708588013401088e-51, 3.439476842414123e-52, 4.273906135544132e-53, 5.195729027524327e-54, 6.178157323176919e-55, 7.183903864159399e-56, 8.166672986231178e-57, 9.074081095812266e-58, 9.851859475453538e-59, 1.0448941867905181e-59, 1.0822821143781184e-60, 1.0944425875733928e-61, 1.0801761106404015e-62, 1.0401695880240786e-63, 9.769548616800856e-65, 8.946473092308687e-66, 7.9850124139e-67, 6.943489055565338e-68, 5.880071812821141e-69, 4.847371028490498e-70, 3.8882655308747744e-71, 3.033398641107987e-72, 2.3004610505757063e-73, 1.6950765635820824e-74, 1.2128820088458017e-75, 8.422791728096032e-77, 5.673383029287429e-78, 3.704270706407706e-79, 2.342872070719346e-80, 1.43441147186899e-81, 8.494822591440592e-83, 4.862356365471016e-84, 2.6877346743810504e-85, 1.4334584930031727e-86, 7.369355436666655e-88, 3.648195760725927e-89, 1.7372360765362278e-90, 7.94813891225734e-92, 3.4894268395275954e-93, 1.4680436541701734e-94, 5.909998607770296e-96, 2.2730763876040223e-97, 8.338238742406937e-99, 2.911765910046831e-100, 9.659886905368891e-102, 3.0377002847071597e-103, 9.032285666578348e-105, 2.53241654203128e-106, 6.674586234811246e-108, 1.6480459839040284e-109, 3.7973409767374154e-111, 8.128864476195943e-113, 1.6084511140114475e-114, 2.9244565709298125e-116, 4.85203955961208e-118, 7.285344684102249e-120, 9.800912131079295e-122, 1.166775253699892e-123, 1.2099891519850716e-125, 1.0707868601637923e-127, 7.861871219998539e-130, 4.597585508771197e-132, 2.007679261472068e-134, 5.819360178179809e-137, 8.397345134458861e-140]

rolls = 1_000_000_000
num_of_processors = 16

def rolling(maxNum, rolls):
    sub_rolls = -(rolls // -10_000_000)
    for i in range(sub_rolls):
        random = rng.choice(amount, -(rolls // -sub_rolls), p=prob)
        maximum = np.max(random)
        if maximum > maxNum.value:
            maxNum.value = maximum
    
def main():
    maxNum = Value('i', 0)
    
    new_rolls = -(rolls // -num_of_processors)

    processes = []
    for i in range(num_of_processors):
        p = Process(target=rolling, args=(maxNum, new_rolls))
        processes.append(p)
        p.start()

    for p in processes:
        p.join()

    print(f"Highest Roll: {maxNum.value}\n"
        f"Number of Roll Sessions: {rolls}")

if __name__ == "__main__":
    print(f"Took {timeit(main, number=1)} seconds")